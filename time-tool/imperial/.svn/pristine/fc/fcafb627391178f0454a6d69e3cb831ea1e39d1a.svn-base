
#include <string>
#include <vector>

#include "ICS_Day.h"
#include "ICS_VEvent.h"
#include "ICS_Time/ICS_Date.h"
#include "icsExceptions.h"

using namespace std;

ICS_Day ICS_Day::generateCommonDay(vector<ICS_Day> otherDays){
	ICS_Day day(1, 1, 1);
	return day;
}

/* Programmer readable console output.
 * i.e. Monday: VEventCount, stuff
 *      Tuesday: VEventCount, stuff... */
ICS_Day::ICS_Day(vector<ICS_VEvent> daysEvents){
	if(checkSameDay(daysEvents)){
		int year = daysEvents[0].getStartTime().getYear();
		int month = daysEvents[0].getStartTime().getMonth();
		int day = daysEvents[0].getStartTime().getDayOfMonth();
		this->date.setYear(year);
		this->date.setDayOfMonth(month);
		this->date.setDayOfMonth(day);
		this->daysEvents = daysEvents;
		this->initialized = true;
	}
};

ICS_Day::ICS_Day(int year, int month, int dayOfMonth){
	this->date.setYear(year);
	this->date.setMonth(month);
	this->date.setDayOfMonth(dayOfMonth);
	this->initialized = true;
};

bool ICS_Day::checkSameDay(vector<ICS_VEvent> testDaysEvents){
	if(testDaysEvents.size() <= 0){
		throw DifferentDayException("No events this day!");
	} else {
		for(unsigned int i = 0; i < testDaysEvents.size(); i++){
			if(!testDaysEvents[0].onSameDateAs(testDaysEvents[i])) {
				throw DifferentDayException("Not all events are on the same day!");
				return false;
			}
		}
	}
	return true;
}

ostream& operator<<(ostream& output, ICS_Day& right){
	if(right.daysEvents.size() > 0){
		right.sortVEvents();
		output << "# of vEvents: " << right.getNumberOfVEvents();
		//output << "Earliest start time: " << right.getDaysEvents[0].getStartTime();
		output << "Latest end time: " << right.daysEvents[right.getNumberOfVEvents() - 1].getEndTime();
	} else output << "No events are present.";
	return output;
};

// writes the vector of VEvent as a list of VEVENTs to .ics file
ofstream& operator<<(ofstream& file, const ICS_Day& right){
	for(size_t i = 0; i < right.daysEvents.size(); i++){
		file << right.daysEvents[i];
	}
	return file;
};

ICS_VEvent ICS_Day::operator[](int index){
	this->sortVEvents();
	return this->daysEvents[index];
};

/* use ICS_VEvent.startDate >, <, ==... other.StartDate
 * Must run in a good run time {i.e. n(log(n))}, insertion sort  */
void ICS_Day::sortVEvents(){
	int d;
	ICS_VEvent temp;
	for (unsigned int c = 1 ; c <= daysEvents.size() - 1; c++) {
		d = c;
		while ( d > 0 && daysEvents[d].getStartTime() < daysEvents[d-1].getStartTime()) {
			temp = daysEvents[d];
			daysEvents[d] = daysEvents[d-1];
			daysEvents[d-1] = temp;
			d--;
		}
	}
}

size_t ICS_Day::getNumberOfVEvents() const{
	return daysEvents.size();
}

void ICS_Day::add(const ICS_VEvent& event){
	if(this->daysEvents.size() != 0){
		if(initialized){ // no date or events
			int year = event.getStartTime().getYear();
			this->date.setYear(year);
			this->date.setMonth(event.getStartTime().getMonth());
			this->date.setDayOfMonth(event.getStartTime().getDayOfMonth());
			daysEvents.push_back(event);
		} else {
			ICS_Date start = event.getStartTime();
			if (this->date.getYear() == start.getYear() && this->date.getMonth() == start.getMonth() && this->date.getDayOfMonth() == start.getDayOfMonth()){
				daysEvents.push_back(event);
			} else throw DifferentDayException("Event is not on the same day.");
		}
	}
	if(daysEvents[0].onSameDateAs(event)){
		this->daysEvents.push_back(event);
	}
	else throw DifferentDayException("Event is not on the same day as other events!");
};

void ICS_Day::pop(const int i){
	this->daysEvents.erase(daysEvents.begin() + i);
};

ICS_Date ICS_Day::getDate(){
	return this->date;
};
